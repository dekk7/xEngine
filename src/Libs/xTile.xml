<?xml version="1.0"?>
<doc>
    <assembly>
        <name>xTile</name>
    </assembly>
    <members>
        <member name="T:xTile.ObjectModel.IPropertyCollection">
            <summary>
            Interface to a custom property collection used by
            component objects. This interface extends the .NET Framework
            generic Dictionary class
            </summary>
        </member>
        <member name="M:xTile.ObjectModel.IPropertyCollection.CopyFrom(xTile.ObjectModel.IPropertyCollection)">
            <summary>
            Copies the given property collection into this collection
            </summary>
            <param name="propertyCollection">Property collection to copy from</param>
        </member>
        <member name="T:xTile.Format.CompatibilityReport">
            <summary>
            Represents a report on the compatibility of a map in a given format
            </summary>
        </member>
        <member name="M:xTile.Format.CompatibilityReport.#ctor(System.Collections.Generic.IEnumerable{xTile.Format.CompatibilityNote})">
            <summary>
            Constructs a compatibility report using the given compatibility notes
            </summary>
            <param name="compatibilityNotes">Compatibility notes to populate report with</param>
        </member>
        <member name="M:xTile.Format.CompatibilityReport.#ctor">
            <summary>
            Creats a blank compatibility report. A report with no notes is assumed
            to represent a format compliant map
            </summary>
        </member>
        <member name="P:xTile.Format.CompatibilityReport.CompatibilityLevel">
            <summary>
            Overall compatibility level. This is computed from the worst case
            note within the report. If no notes are present, Full compatibility
            is assumed
            </summary>
        </member>
        <member name="P:xTile.Format.CompatibilityReport.CompatibilityNotes">
            <summary>
            Collection of compatibility notes
            </summary>
        </member>
        <member name="T:xTile.Dimensions.Rectangle">
            <summary>
            Rectangle representation structure
            </summary>
        </member>
        <member name="M:xTile.Dimensions.Rectangle.#ctor(xTile.Dimensions.Location,xTile.Dimensions.Size)">
            <summary>
            Constructs a Rectangle given a Location and Size
            </summary>
            <param name="location">Location of the Top-left corner</param>
            <param name="size">Rectangle dimensions</param>
        </member>
        <member name="M:xTile.Dimensions.Rectangle.#ctor(xTile.Dimensions.Size)">
            <summary>
            Constructs a Rectangle with the given Size. The top-left
            corner is placed at the origin
            </summary>
            <param name="size">Recangle dimensions</param>
        </member>
        <member name="M:xTile.Dimensions.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a Rectangle with the given location and height
            </summary>
            <param name="x">Horizontal location coordinate</param>
            <param name="y">Vertical location coordinate</param>
            <param name="width">Rectangle width</param>
            <param name="height">Rectangle height</param>
        </member>
        <member name="M:xTile.Dimensions.Rectangle.#ctor(xTile.Dimensions.Rectangle)">
            <summary>
            Constructs a Rectangle from another one
            </summary>
            <param name="rectangle">Rectangle to clone</param>
        </member>
        <member name="M:xTile.Dimensions.Rectangle.Contains(xTile.Dimensions.Location)">
            <summary>
            Tests if a Location is inside the Rectangle
            </summary>
            <param name="location">Location to test</param>
            <returns>True if the Location is inside the Rectangle, False otherwise</returns>
        </member>
        <member name="M:xTile.Dimensions.Rectangle.Intersects(xTile.Dimensions.Rectangle)">
            <summary>
            Tests if a Rectangle intersects this Rectangle
            </summary>
            <param name="rectangle">Rectangle to test</param>
            <returns>True in case of intersection, False otherwise</returns>
        </member>
        <member name="M:xTile.Dimensions.Rectangle.ExtendTo(xTile.Dimensions.Location)">
            <summary>
            Extends the Rectangle bounds to contain the given Location
            </summary>
            <param name="location">Location to contain</param>
        </member>
        <member name="M:xTile.Dimensions.Rectangle.ExtendTo(xTile.Dimensions.Rectangle)">
            <summary>
            Extends this Rectangle to contain the given Rectangle
            </summary>
            <param name="rectangle">Rectangle to contain</param>
        </member>
        <member name="M:xTile.Dimensions.Rectangle.ToString">
            <summary>
            Generates a string representation of the Rectangle
            </summary>
            <returns>String representation of the Rectangle</returns>
        </member>
        <member name="F:xTile.Dimensions.Rectangle.Location">
            <summary>
            Location of the rectangle's top-left corner
            </summary>
        </member>
        <member name="F:xTile.Dimensions.Rectangle.Size">
            <summary>
            Dimensions of the rectangle
            </summary>
        </member>
        <member name="P:xTile.Dimensions.Rectangle.X">
            <summary>
            Horizontal coordinate of the top left corner
            </summary>
        </member>
        <member name="P:xTile.Dimensions.Rectangle.Y">
            <summary>
            Vertical coordinate of the top left corner
            </summary>
        </member>
        <member name="P:xTile.Dimensions.Rectangle.Width">
            <summary>
            Rectangle width
            </summary>
        </member>
        <member name="P:xTile.Dimensions.Rectangle.Height">
            <summary>
            Rectangle height
            </summary>
        </member>
        <member name="P:xTile.Dimensions.Rectangle.MaxCorner">
            <summary>
            Coordinate of the bottom-right corner
            </summary>
        </member>
        <member name="T:xTile.Tiles.StaticTile">
            <summary>
            Static tile implementation
            </summary>
        </member>
        <member name="T:xTile.Tiles.Tile">
            <summary>
            Partially abstract, base implementation for all tile types
            </summary>
        </member>
        <member name="T:xTile.ObjectModel.Component">
            <summary>
            Base class for all xTile map components. Can be assigned an ID and
            optionally one or more custom properties
            </summary>
        </member>
        <member name="M:xTile.ObjectModel.Component.#ctor">
            <summary>
            Constructs a Component with an automatically-assigned GUID
            </summary>
        </member>
        <member name="M:xTile.ObjectModel.Component.#ctor(System.String)">
            <summary>
            Constructs a Component with the given ID
            </summary>
            <param name="id">ID to assign to the Component</param>
        </member>
        <member name="M:xTile.ObjectModel.Component.ToString">
            <summary>
            Returns a string representation of this Component
            </summary>
            <returns>string representation of this Component</returns>
        </member>
        <member name="P:xTile.ObjectModel.Component.Id">
            <summary>
            Identifier string for this Component
            </summary>
        </member>
        <member name="P:xTile.ObjectModel.Component.Properties">
            <summary>
            Custom Property collection associated with this Component
            </summary>
        </member>
        <member name="M:xTile.Tiles.Tile.#ctor(xTile.Layers.Layer)">
            <summary>
            Constructs a new tile for the given layer
            </summary>
            <param name="layer">Layer to which the tile is assigned</param>
        </member>
        <member name="M:xTile.Tiles.Tile.DependsOnTileSheet(xTile.Tiles.TileSheet)">
            <summary>
            Tests if this tile depends on the given tile sheet
            </summary>
            <param name="tileSheet">tile sheet to test</param>
            <returns>True if the tile depends on the given tile sheet, False otherwise</returns>
        </member>
        <member name="M:xTile.Tiles.Tile.Clone(xTile.Layers.Layer)">
            <summary>
            Clones this tile for the given layer
            </summary>
            <param name="layer">Layer to assign to the new tile</param>
            <returns>Cloned tile implementation</returns>
        </member>
        <member name="P:xTile.Tiles.Tile.Layer">
            <summary>
            Layer containing the tile
            </summary>
        </member>
        <member name="P:xTile.Tiles.Tile.BlendMode">
            <summary>
            Tile blending mode
            </summary>
        </member>
        <member name="P:xTile.Tiles.Tile.TileSheet">
            <summary>
            Tile sheet from which the tile originates. May vary over time
            for animated tiles
            </summary>
        </member>
        <member name="P:xTile.Tiles.Tile.TileIndex">
            <summary>
            Tile's index into the associated tile sheet. For an animated
            tile, the sheet may vary according to the current animation
            frame
            </summary>
        </member>
        <member name="P:xTile.Tiles.Tile.TileIndexProperties">
            <summary>
            Custom properties stored at tile index level within the associated tile sheet
            </summary>
        </member>
        <member name="M:xTile.Tiles.StaticTile.#ctor(xTile.Layers.Layer,xTile.Tiles.TileSheet,xTile.Tiles.BlendMode,System.Int32)">
            <summary>
            Constructs a static tile for the given layer, tile sheet, blend
            mode and tile index
            </summary>
            <param name="layer">Layer to assign the tile to</param>
            <param name="tileSheet">Tile sheet associated with the tile</param>
            <param name="blendMode">Tile blend mode</param>
            <param name="tileIndex">Index of the tile in the given tile sheet</param>
        </member>
        <member name="M:xTile.Tiles.StaticTile.DependsOnTileSheet(xTile.Tiles.TileSheet)">
            <summary>
            Tests if this tile depends on the given tile sheet
            </summary>
            <param name="tileSheet">Tile sheet to test</param>
            <returns>True if this tile depends on the sheet, False otherwise</returns>
        </member>
        <member name="M:xTile.Tiles.StaticTile.Clone(xTile.Layers.Layer)">
            <summary>
            Clones the tile for the given Layer
            </summary>
            <param name="layer">Layer to assigned to the cloned tile</param>
            <returns>Cloned static tile</returns>
        </member>
        <member name="M:xTile.Tiles.StaticTile.ToString">
            <summary>
            Generates and returns a string representation of the tile
            </summary>
            <returns>String representation of the tile</returns>
        </member>
        <member name="P:xTile.Tiles.StaticTile.BlendMode">
            <summary>
            Tile blending mode
            </summary>
        </member>
        <member name="P:xTile.Tiles.StaticTile.TileSheet">
            <summary>
            Tile sheet from which the tile originates
            </summary>
        </member>
        <member name="P:xTile.Tiles.StaticTile.TileIndex">
            <summary>
            Index of the tile in the associated tile sheet
            </summary>
        </member>
        <member name="T:xTile.Tiles.AnimatedTile">
            <summary>
            Animated implementation of the Tile base class. The constituent
            animation frames are internally stored as StaticTile
            immplementations. The animation is cyclic and regulated by a
            constant frame interval
            </summary>
        </member>
        <member name="M:xTile.Tiles.AnimatedTile.#ctor(xTile.Layers.Layer,xTile.Tiles.StaticTile[],System.Int64)">
            <summary>
            Constructs a new animated tile for the given layer, using the
            given tile frames and frame interval
            </summary>
            <param name="layer">Layer to assign the tile to</param>
            <param name="tileFrames">Array of StaticTile instances</param>
            <param name="frameInterval">Frame interval in milliseconds</param>
        </member>
        <member name="M:xTile.Tiles.AnimatedTile.DependsOnTileSheet(xTile.Tiles.TileSheet)">
            <summary>
            Tests if this tile depends on the given tile sheet. All animation
            frames are tested for dependency
            </summary>
            <param name="tileSheet">Tile sheet to test</param>
            <returns>True if this tile depends on the sheet, False otherwise</returns>
        </member>
        <member name="M:xTile.Tiles.AnimatedTile.Clone(xTile.Layers.Layer)">
            <summary>
            Clones this AnimatedTile for the given Layer
            </summary>
            <param name="layer">Layer to assign the new tile to</param>
            <returns>Cloned AnimatedTile instance</returns>
        </member>
        <member name="M:xTile.Tiles.AnimatedTile.ToString">
            <summary>
            Generates and returns a string representation of this tile
            </summary>
            <returns>String representation of this tile</returns>
        </member>
        <member name="P:xTile.Tiles.AnimatedTile.BlendMode">
            <summary>
            Tile blending mode. This may vary according to the current
            animation frame
            </summary>
        </member>
        <member name="P:xTile.Tiles.AnimatedTile.TileSheet">
            <summary>
            Tile sheet of the current animation frame
            </summary>
        </member>
        <member name="P:xTile.Tiles.AnimatedTile.TileIndex">
            <summary>
            Tile index of the current animation frame
            </summary>
        </member>
        <member name="P:xTile.Tiles.AnimatedTile.TileFrames">
            <summary>
            Animation frames
            </summary>
        </member>
        <member name="P:xTile.Tiles.AnimatedTile.FrameInterval">
            <summary>
            Frame interval in milliseconds
            </summary>
        </member>
        <member name="T:xTile.Layers.LayerEventHandler">
            <summary>
            Delegate for Layer events
            </summary>
            <param name="sender">Source of layer event</param>
            <param name="layerEventArgs">Argument structure for Layer events</param>
        </member>
        <member name="T:xTile.Layers.LayerEventArgs">
            <summary>
            Argument structure for Layer-related events
            </summary>
        </member>
        <member name="M:xTile.Layers.LayerEventArgs.#ctor(xTile.Layers.Layer,xTile.Dimensions.Rectangle)">
            <summary>
            Constructs a new Layer arguments structure
            </summary>
            <param name="layer">Layer associated with the event</param>
            <param name="viewport">Viewport associated with the event</param>
        </member>
        <member name="P:xTile.Layers.LayerEventArgs.Layer">
            <summary>
            Layer associated with the event
            </summary>
        </member>
        <member name="P:xTile.Layers.LayerEventArgs.Viewport">
            <summary>
            Viewport at the time of the event
            </summary>
        </member>
        <member name="T:xTile.Layers.Layer">
            <summary>
            Represents a layer within an xTile map
            </summary>
        </member>
        <member name="T:xTile.ObjectModel.DescribedComponent">
            <summary>
            Derivation of a Component type with a Description property
            </summary>
        </member>
        <member name="M:xTile.ObjectModel.DescribedComponent.#ctor">
            <summary>
            Constructs a default DescribedComponent. The object is
            assigned a GUID-based ID, a blank property collection
            and a blank description
            </summary>
        </member>
        <member name="M:xTile.ObjectModel.DescribedComponent.#ctor(System.String)">
            <summary>
            Constructs a DescribedComponent using the given ID. The object is
            assigned a blank property collection and a blank description
            </summary>
            <param name="id">ID to assign to the DescribedComponent</param>
        </member>
        <member name="M:xTile.ObjectModel.DescribedComponent.#ctor(System.String,System.String)">
            <summary>
            Constructs a DescribedComponent using the given ID and
            description
            </summary>
            <param name="id">ID to assign to the DescribedComponent</param>
            <param name="description">Descriptive text to assign to the component</param>
        </member>
        <member name="P:xTile.ObjectModel.DescribedComponent.Description">
            <summary>
            Description associated with this Component
            </summary>
        </member>
        <member name="M:xTile.Layers.Layer.#ctor(System.String,xTile.Map,xTile.Dimensions.Size,xTile.Dimensions.Size)">
            <summary>
            Constructs a new layer with the given ID, parent map,
            layer dimensions and tile dimensions
            </summary>
            <param name="id">ID to assign to the layer</param>
            <param name="map">map containing the new layer</param>
            <param name="layerSize">width and height of the layer in tiles</param>
            <param name="tileSize">tile width and height in pixels</param>
        </member>
        <member name="M:xTile.Layers.Layer.DependsOnTileSheet(xTile.Tiles.TileSheet)">
            <summary>
            Tests if the layer contains at least one tile that references
            the given tile sheet
            </summary>
            <param name="tileSheet">Tile sheet to test</param>
            <returns>True if the layer depends on the given tile sheet, false otherwise</returns>
        </member>
        <member name="M:xTile.Layers.Layer.GetTileLocation(xTile.Dimensions.Location)">
            <summary>
            Returns the coordinates in tile units, given a location
            in pixels within the layer
            </summary>
            <param name="layerDisplayLocation">pixel location within the layer</param>
            <returns>Location in tile coordinates</returns>
        </member>
        <member name="M:xTile.Layers.Layer.IsValidTileLocation(xTile.Dimensions.Location)">
            <summary>
            Tests if the given tile location is within the layer bounds
            </summary>
            <param name="tileLocation">tile coordinates to test</param>
            <returns>True if the location is within the layer, False otherwise</returns>
        </member>
        <member name="M:xTile.Layers.Layer.IsValidTileLocation(System.Int32,System.Int32)">
            <summary>
            Tests if the given tile location is within the layer bounds
            </summary>
            <param name="tileX">horizontal tile coordiate to test</param>
            <param name="tileY">vertical tile coordinate to test</param>
            <returns>True if the location is within the layer, False otherwise</returns>
        </member>
        <member name="M:xTile.Layers.Layer.ConvertMapToLayerViewport(xTile.Dimensions.Rectangle)">
            <summary>
            Converts the viewport given in map pixel coordinates to layer
            coordinates taking into account parallax effects
            </summary>
            <param name="mapViewport">Viewport in map pixel coordinates</param>
            <returns>Viewport in layer pixel coordinates</returns>
        </member>
        <member name="M:xTile.Layers.Layer.ConvertMapToLayerLocation(xTile.Dimensions.Location,xTile.Dimensions.Size)">
            <summary>
            Convers the map location given in pixels to a layer location in
            pixels taking into account parallax effects given the viewport size
            </summary>
            <param name="mapDisplayLocation">Location in map pixel coordinates</param>
            <param name="viewportSize">Viewport dimensions in pixels</param>
            <returns>Location in layer pixel coordinates</returns>
        </member>
        <member name="M:xTile.Layers.Layer.ConvertLayerToMapLocation(xTile.Dimensions.Location,xTile.Dimensions.Size)">
            <summary>
            Convers the layer location given in pixels to a map location in
            pixels taking into account parallax effects given the viewport size
            </summary>
            <param name="layerDisplayLocation">Location in layer pixel coordinates</param>
            <param name="viewportSize">Viewport dimensions in pixels</param>
            <returns>Location in map pixel coordinates</returns>
        </member>
        <member name="M:xTile.Layers.Layer.GetTileDisplayRectangle(xTile.Dimensions.Rectangle,xTile.Dimensions.Location)">
            <summary>
            Computes and returns a rectangle representing a tile's bounadaries
            given the map viewport and location in tile coordinates, taking into
            account parallax effects. The rectangle coordinates are computed
            relative to the viewport origin
            </summary>
            <param name="mapViewport">Map viewport in pixels</param>
            <param name="tileLocation">Location in tile coordinates</param>
            <returns>Rectangle representing the bounadries of the tile</returns>
        </member>
        <member name="M:xTile.Layers.Layer.PickTile(xTile.Dimensions.Location,xTile.Dimensions.Size)">
            <summary>
            Returns a reference to a tile given a pixel location within the
            map and the viewport size taking into account parallax effects.
            If no tile is assigned a at the computed location, null is
            returned
            </summary>
            <param name="mapDisplayLocation">pixel location where to pick the tile</param>
            <param name="viewportSize">viewport size to compute parallax for this layer</param>
            <returns>Tile picked at the location, or null if one present</returns>
        </member>
        <member name="M:xTile.Layers.Layer.RemoveTileSheetDependency(xTile.Tiles.TileSheet)">
            <summary>
            Eliminates any tiles that refer to the given tile sheet
            </summary>
            <param name="tileSheet">tile sheet to test</param>
        </member>
        <member name="M:xTile.Layers.Layer.Draw(xTile.Display.IDisplayDevice,xTile.Dimensions.Rectangle,xTile.Dimensions.Location,System.Boolean)">
            <summary>
            Visually renders the layer using the given display device,
            pixel offset from the map origin and display viewport. If
            wrapAround is set to True, the layer wraps around at the
            edges across and / or down.
            </summary>
            <param name="displayDevice">Display device on which to render layer</param>
            <param name="mapViewport">viewport on the dipslay device</param>
            <param name="displayOffset">offset in pixel coordinates into the map from the top left</param>
            <param name="wrapAround">Flag indicating if layer wrap-around is performed</param>
        </member>
        <member name="P:xTile.Layers.Layer.Map">
            <summary>
            Map containing this layer
            </summary>
        </member>
        <member name="P:xTile.Layers.Layer.LayerSize">
            <summary>
            Width and height of this layer in tiles
            </summary>
        </member>
        <member name="P:xTile.Layers.Layer.LayerWidth">
            <summary>
            Width of this layer in tiles
            </summary>
        </member>
        <member name="P:xTile.Layers.Layer.LayerHeight">
            <summary>
            Height of this layer in tiles
            </summary>
        </member>
        <member name="P:xTile.Layers.Layer.TileSize">
            <summary>
            Width and height of the tiles used in this layer
            </summary>
        </member>
        <member name="P:xTile.Layers.Layer.TileWidth">
            <summary>
            Width of the tiles used in this layer
            </summary>
        </member>
        <member name="P:xTile.Layers.Layer.TileHeight">
            <summary>
            Height of the tiles used in this layer
            </summary>
        </member>
        <member name="P:xTile.Layers.Layer.DisplaySize">
            <summary>
            Width and height of this layer in pixels
            </summary>
        </member>
        <member name="P:xTile.Layers.Layer.DisplayWidth">
            <summary>
            Width of this layer in pixels
            </summary>
        </member>
        <member name="P:xTile.Layers.Layer.DisplayHeight">
            <summary>
            Height of this layer in pixels
            </summary>
        </member>
        <member name="P:xTile.Layers.Layer.Visible">
            <summary>
            Visibilty flag to control rendering of this layer
            </summary>
        </member>
        <member name="P:xTile.Layers.Layer.Tiles">
            <summary>
            Doubly-indexed accessor to this layer's tiles
            </summary>
        </member>
        <member name="E:xTile.Layers.Layer.BeforeDraw">
            <summary>
            Raised before this layer is rendered
            </summary>
        </member>
        <member name="E:xTile.Layers.Layer.AfterDraw">
            <summary>
            Raised after this layer is rendered
            </summary>
        </member>
        <member name="T:xTile.Format.IMapFormat">
            <summary>
            Abstract interface to a map format implementation
            </summary>
        </member>
        <member name="M:xTile.Format.IMapFormat.DetermineCompatibility(xTile.Map)">
            <summary>
            Generates a compatibility report for the given map
            according to this format
            </summary>
            <param name="map">Map to analyse</param>
            <returns>Format compatibility report</returns>
        </member>
        <member name="M:xTile.Format.IMapFormat.Load(System.IO.Stream)">
            <summary>
            Loads a map from the given stream according to this format
            </summary>
            <param name="stream">Stream from which to load the map</param>
            <returns>Map instance loaded from the given stream</returns>
        </member>
        <member name="M:xTile.Format.IMapFormat.Store(xTile.Map,System.IO.Stream)">
            <summary>
            Stores the given map in the given stream according to this format
            </summary>
            <param name="map">Map to store</param>
            <param name="stream">Output stream on which to store the map</param>
        </member>
        <member name="P:xTile.Format.IMapFormat.Name">
            <summary>
            Name of this map format
            </summary>
        </member>
        <member name="P:xTile.Format.IMapFormat.FileExtensionDescriptor">
            <summary>
            Descriptive text for this map format
            </summary>
        </member>
        <member name="P:xTile.Format.IMapFormat.FileExtension">
            <summary>
            File extension associated with this map format
            </summary>
        </member>
        <member name="T:xTile.Tiles.BlendMode">
            <summary>
            Tile Blending Mode
            </summary>
        </member>
        <member name="F:xTile.Tiles.BlendMode.Alpha">
            <summary>
            Alpha blending based on alpha channel
            </summary>
        </member>
        <member name="F:xTile.Tiles.BlendMode.Additive">
            <summary>
            Additive blending
            </summary>
        </member>
        <member name="T:xTile.Dimensions.Location">
            <summary>
            Represents a position in two integral dimensions
            </summary>
        </member>
        <member name="F:xTile.Dimensions.Location.X">
            <summary>
            Horizontal integral coordinate
            </summary>
        </member>
        <member name="F:xTile.Dimensions.Location.Y">
            <summary>
            Vertical integral coordinate
            </summary>
        </member>
        <member name="M:xTile.Dimensions.Location.op_Equality(xTile.Dimensions.Location,xTile.Dimensions.Location)">
            <summary>
            Tests if two locations are identical (equality operator)
            </summary>
            <param name="location1">First location to test</param>
            <param name="location2">Second location to test</param>
            <returns>True if the given locations are equal, False otherwise</returns>
        </member>
        <member name="M:xTile.Dimensions.Location.op_Inequality(xTile.Dimensions.Location,xTile.Dimensions.Location)">
            <summary>
            Tests if two locations are different (inequality operator)
            </summary>
            <param name="location1">First location to test</param>
            <param name="location2">Second location to test</param>
            <returns>False if the given locations are equal, True otherwise</returns>
        </member>
        <member name="M:xTile.Dimensions.Location.op_UnaryNegation(xTile.Dimensions.Location)">
            <summary>
            Negates the location coordinates (vector negation)
            </summary>
            <param name="location">Location to negate</param>
            <returns>Negated location</returns>
        </member>
        <member name="M:xTile.Dimensions.Location.op_Addition(xTile.Dimensions.Location,xTile.Dimensions.Location)">
            <summary>
            Adds two locations using vector addition
            </summary>
            <param name="location1">First location to add</param>
            <param name="location2">Second location to add</param>
            <returns>Vector sum of locations</returns>
        </member>
        <member name="M:xTile.Dimensions.Location.op_Subtraction(xTile.Dimensions.Location,xTile.Dimensions.Location)">
            <summary>
            Subtracts one location from another using vector subtraction
            </summary>
            <param name="location1">Location from which to subtruct</param>
            <param name="location2">Location to subtract</param>
            <returns>Vector difference of locations</returns>
        </member>
        <member name="M:xTile.Dimensions.Location.op_Multiply(xTile.Dimensions.Location,System.Int32)">
            <summary>
            Scales up the given location coordinates by the given integral factor
            using vector - scalar multiplication
            </summary>
            <param name="location">Location to scale up</param>
            <param name="scale">Scaling factor</param>
            <returns></returns>
        </member>
        <member name="M:xTile.Dimensions.Location.op_Multiply(System.Int32,xTile.Dimensions.Location)">
            <summary>
            Scales up the given location coordinates by the given integral factor
            using scalar - vector multiplication
            </summary>
            <param name="scale">Scaling factor</param>
            <param name="location">Location to scale up</param>
            <returns></returns>
        </member>
        <member name="M:xTile.Dimensions.Location.op_Division(xTile.Dimensions.Location,System.Int32)">
            <summary>
            Scales down the givel location using the given integral divisor
            </summary>
            <param name="location">Location to scale down</param>
            <param name="divisor">Divisor to apply for scaling down</param>
            <returns></returns>
        </member>
        <member name="M:xTile.Dimensions.Location.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a Location from the given integral coordinates
            </summary>
            <param name="x">Horizontal coordinate</param>
            <param name="y">Vertical coordinate</param>
        </member>
        <member name="M:xTile.Dimensions.Location.GetHashCode">
            <summary>
            Computes a hash code of the location
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:xTile.Dimensions.Location.Equals(System.Object)">
            <summary>
            Compares the location with another object. The method returns true
            only if the object is a Location and its coordinates match with this
            Location
            </summary>
            <param name="obj">object to compare to this location</param>
            <returns>True if the object is a matching Location, false otherwise</returns>
        </member>
        <member name="M:xTile.Dimensions.Location.ToString">
            <summary>
            Generates a string representatino of the Location
            </summary>
            <returns></returns>
        </member>
        <member name="P:xTile.Dimensions.Location.Origin">
            <summary>
            Static Location property representing the origin [0, 0]
            </summary>
        </member>
        <member name="P:xTile.Dimensions.Location.AboveLeft">
            <summary>
            A location one unit above and left of this location
            </summary>
        </member>
        <member name="P:xTile.Dimensions.Location.Above">
            <summary>
            A location one unit above this location
            </summary>
        </member>
        <member name="P:xTile.Dimensions.Location.AboveRight">
            <summary>
            A location one unit above and right of this location
            </summary>
        </member>
        <member name="P:xTile.Dimensions.Location.Left">
            <summary>
            A location one unit left of this location
            </summary>
        </member>
        <member name="P:xTile.Dimensions.Location.Right">
            <summary>
            A location one unit right of this location
            </summary>
        </member>
        <member name="P:xTile.Dimensions.Location.BelowLeft">
            <summary>
            A location one unit below and left of this location
            </summary>
        </member>
        <member name="P:xTile.Dimensions.Location.Below">
            <summary>
            A location one unit below this location
            </summary>
        </member>
        <member name="P:xTile.Dimensions.Location.BelowRight">
            <summary>
            A location one unit below and right of this location
            </summary>
        </member>
        <member name="T:xTile.Tiles.TileIndexPropertyAccessor">
            <summary>
            Accessor class for tile index properties, associated with
            a specific tile sheet
            </summary>
        </member>
        <member name="M:xTile.Tiles.TileIndexPropertyAccessor.#ctor(xTile.Tiles.TileSheet)">
            <summary>
            Constructs an accessor for the given tile sheet
            </summary>
            <param name="tileSheet">Tile sheet associated with the accessor</param>
        </member>
        <member name="P:xTile.Tiles.TileIndexPropertyAccessor.Item(System.Int32)">
            <summary>
            The property collection associated with a given tile index
            </summary>
            <param name="tileIndex">Tile index for which to access the properties</param>
            <returns>a property collection for the given tile index</returns>
        </member>
        <member name="T:xTile.Dimensions.Size">
            <summary>
            Size representation structure in two integral dimensions
            </summary>
        </member>
        <member name="M:xTile.Dimensions.Size.FromString(System.String)">
            <summary>
            Parses a string representation of a Size object and returns a Size
            instance
            </summary>
            <param name="value">String representation to parse</param>
            <returns>Parsed Size object</returns>
        </member>
        <member name="M:xTile.Dimensions.Size.op_Equality(xTile.Dimensions.Size,xTile.Dimensions.Size)">
            <summary>
            Tests if the given Sizes are equal
            </summary>
            <param name="size1">First Size to compare</param>
            <param name="size2">Second Size to compare</param>
            <returns>True if the Sizes are equal, False otherwise</returns>
        </member>
        <member name="M:xTile.Dimensions.Size.op_Inequality(xTile.Dimensions.Size,xTile.Dimensions.Size)">
            <summary>
            Tests if the given Sizes are different
            </summary>
            <param name="size1">First Size to compare</param>
            <param name="size2">Second Size to compare</param>
            <returns>False if the Sizes are equal, True otherwise</returns>
        </member>
        <member name="M:xTile.Dimensions.Size.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new Size object from the given dimensions
            </summary>
            <param name="width">Horizontal dimension</param>
            <param name="height">Vertical dimensions</param>
        </member>
        <member name="M:xTile.Dimensions.Size.#ctor(System.Int32)">
            <summary>
            Constructs a Size object from the given Size
            </summary>
            <param name="size">Size object to clone</param>
        </member>
        <member name="M:xTile.Dimensions.Size.Equals(System.Object)">
            <summary>
            Testts if the given object is equal to this Size
            </summary>
            <param name="other">Object to compare</param>
            <returns>Returns True if th object is a Size and if it matches this Size</returns>
        </member>
        <member name="M:xTile.Dimensions.Size.GetHashCode">
            <summary>
            Computes a hash code for the Size
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:xTile.Dimensions.Size.ToString">
            <summary>
            Generates a string representation of the Size
            </summary>
            <returns>String representation of the Size</returns>
        </member>
        <member name="F:xTile.Dimensions.Size.Width">
            <summary>
            Horizontal dimension
            </summary>
        </member>
        <member name="F:xTile.Dimensions.Size.Height">
            <summary>
            Vertical dimension
            </summary>
        </member>
        <member name="P:xTile.Dimensions.Size.Zero">
            <summary>
            Static property for a single point
            </summary>
        </member>
        <member name="P:xTile.Dimensions.Size.Area">
            <summary>
            Area of the rectangular region
            </summary>
        </member>
        <member name="P:xTile.Dimensions.Size.Square">
            <summary>
            Tests if the Size represents a Square region
            </summary>
        </member>
        <member name="T:xTile.Tiles.TileArray">
            <summary>
            Doubly-indexed tile array used to hold tiles within a Layer
            </summary>
        </member>
        <member name="M:xTile.Tiles.TileArray.#ctor(xTile.Layers.Layer,xTile.Tiles.Tile[0:,0:])">
            <summary>
            Constructs a TileArray for the given Layer and
            using the given 2d Tile array
            </summary>
            <param name="layer"></param>
            <param name="tiles"></param>
        </member>
        <member name="P:xTile.Tiles.TileArray.Item(System.Int32,System.Int32)">
            <summary>
            Tile accessor using horizontal and vertical coordinates
            </summary>
            <param name="x">Horizontal tile coordinate</param>
            <param name="y">Vertical tile coordinate</param>
            <returns></returns>
        </member>
        <member name="P:xTile.Tiles.TileArray.Item(xTile.Dimensions.Location)">
            <summary>
            Tile accessor using Location instance
            </summary>
            <param name="location">Tile location</param>
            <returns></returns>
        </member>
        <member name="T:xTile.Format.TideFormat">
            <summary>
            Default tIDE map format implementation
            </summary>
        </member>
        <member name="M:xTile.Format.TideFormat.DetermineCompatibility(xTile.Map)">
            <summary>
            Determines the map compatibility with tIDE. This is implicitly
            supported in Full
            </summary>
            <param name="map">Map to analyse</param>
            <returns>Format compatibility report</returns>
        </member>
        <member name="M:xTile.Format.TideFormat.Load(System.IO.Stream)">
            <summary>
            Loads a map in tIDE format from the given stream
            </summary>
            <param name="stream">Input stream</param>
            <returns>Map instance loaded from stream</returns>
        </member>
        <member name="M:xTile.Format.TideFormat.Store(xTile.Map,System.IO.Stream)">
            <summary>
            Stores the given map in the given output stream using
            the tIDE format
            </summary>
            <param name="map">Map to store</param>
            <param name="stream">Output stream</param>
        </member>
        <member name="P:xTile.Format.TideFormat.Name">
            <summary>
            tIDE map format name
            </summary>
        </member>
        <member name="P:xTile.Format.TideFormat.FileExtensionDescriptor">
            <summary>
            tIDE map format descriptor
            </summary>
        </member>
        <member name="P:xTile.Format.TideFormat.FileExtension">
            <summary>
            tIDE file extension (.tide)
            </summary>
        </member>
        <member name="M:xTile.Format.TbinFormat.DetermineCompatibility(xTile.Map)">
            <summary>
            Determines the map compatibility with tIDE. This is implicitly
            supported in full
            </summary>
            <param name="map">Map to analyse</param>
            <returns>Format compatibility report</returns>
        </member>
        <member name="P:xTile.Format.TbinFormat.Name">
            <summary>
            tIDE binary map format name
            </summary>
        </member>
        <member name="P:xTile.Format.TbinFormat.FileExtensionDescriptor">
            <summary>
            tIDE map format descriptor
            </summary>
        </member>
        <member name="P:xTile.Format.TbinFormat.FileExtension">
            <summary>
            tIDE file extension (.tide)
            </summary>
        </member>
        <member name="T:xTile.Display.XnaDisplayDevice">
            <summary>
            XNA implementation of the display device. In this implementation,
            the tile sheet image sources are loaded from the content pipeline
            and alpha and additive blend modes are supported via dedicated
            sprite batch instances
            </summary>
        </member>
        <member name="T:xTile.Display.IDisplayDevice">
            <summary>
            Abstract representation of a display device. The device supports basic rendering
            functions related to tile sheet management and tile drawing
            </summary>
        </member>
        <member name="M:xTile.Display.IDisplayDevice.LoadTileSheet(xTile.Tiles.TileSheet)">
            <summary>
            Loads resources assocaited with the given tile sheet
            </summary>
            <param name="tileSheet">Tile sheet to load</param>
        </member>
        <member name="M:xTile.Display.IDisplayDevice.DisposeTileSheet(xTile.Tiles.TileSheet)">
            <summary>
            Frees any resources associated with the given tile sheet
            </summary>
            <param name="tileSheet">Tile sheet to dispose</param>
        </member>
        <member name="M:xTile.Display.IDisplayDevice.BeginScene">
            <summary>
            Performs any actions required to initialise rendering of a single frame
            </summary>
        </member>
        <member name="M:xTile.Display.IDisplayDevice.SetViewport(xTile.Dimensions.Rectangle)">
            <summary>
            Sets the viewport of the display device. This method assumes the the
            graphics coordinate origin is shifted to match the top-left corner of
            the viewport.
            </summary>
            <param name="clippingRegion">Clipping region to apply</param>
        </member>
        <member name="M:xTile.Display.IDisplayDevice.DrawTile(xTile.Tiles.Tile,xTile.Dimensions.Location)">
            <summary>
            Draws the given tile at the given location
            </summary>
            <param name="tile">Tile to draw</param>
            <param name="location">Drawing location</param>
        </member>
        <member name="M:xTile.Display.IDisplayDevice.EndScene">
            <summary>
            Performs any actions necessary to terminate rendering of the current frame
            </summary>
        </member>
        <member name="M:xTile.Display.XnaDisplayDevice.#ctor(Microsoft.Xna.Framework.Content.ContentManager,Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Constructs an XNA displat device using the given content manager and
            XNA graphics device
            </summary>
            <param name="contentManager">Content manager to use for resource access</param>
            <param name="graphicsDevice">Underlying XNA graphics device</param>
        </member>
        <member name="M:xTile.Display.XnaDisplayDevice.LoadTileSheet(xTile.Tiles.TileSheet)">
            <summary>
            Loads the given tile sheet. The image source is loaded from the
            content pipeline by stripping any extension from the image source
            and using the resulting path into the content pipeline
            </summary>
            <param name="tileSheet">Tile sheet to load</param>
        </member>
        <member name="M:xTile.Display.XnaDisplayDevice.DisposeTileSheet(xTile.Tiles.TileSheet)">
            <summary>
            Frees the tile sheet resources
            </summary>
            <param name="tileSheet">Tile sheet to dispose</param>
        </member>
        <member name="M:xTile.Display.XnaDisplayDevice.BeginScene">
            <summary>
            Prepares the device for rendering
            </summary>
        </member>
        <member name="M:xTile.Display.XnaDisplayDevice.SetViewport(xTile.Dimensions.Rectangle)">
            <summary>
            Sets the viewport.
            
            NOTE: This function is not supported on the Zune platform.
            </summary>
            <param name="clippingRegion">Clipping region to apply</param>
        </member>
        <member name="M:xTile.Display.XnaDisplayDevice.DrawTile(xTile.Tiles.Tile,xTile.Dimensions.Location)">
            <summary>
            Draws the given tile at the given location
            </summary>
            <param name="tile">Tile to draw</param>
            <param name="location">Drawing location</param>
        </member>
        <member name="M:xTile.Display.XnaDisplayDevice.EndScene">
            <summary>
            Terminates rendering of the current frame and commits drawing instructions
            to the underlying XNA graphics pipeline
            </summary>
        </member>
        <member name="M:xTile.Display.XnaDisplayDevice.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:xTile.Display.XnaDisplayDevice.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:xTile.Display.XnaDisplayDevice.ModulationColour">
            <summary>
            Colour modulation property. This is set to White by default
            
            NOTE: This property is specific to this implementation
            </summary>
        </member>
        <member name="P:xTile.Display.XnaDisplayDevice.SpriteBatchAlpha">
            <summary>
            Spritebatch instance used for alpha blending
            </summary>
        </member>
        <member name="P:xTile.Display.XnaDisplayDevice.SpriteBatchAdditive">
            <summary>
            Spritebatch instance used for additive blending
            </summary>
        </member>
        <member name="T:xTile.Tiles.TileSheet">
            <summary>
            Represents an indexed tile sheet based on a tile image source
            </summary>
        </member>
        <member name="M:xTile.Tiles.TileSheet.#ctor(xTile.Map,System.String,xTile.Dimensions.Size,xTile.Dimensions.Size)">
            <summary>
            Constructs a TileSheet for the given map, image source, sheet size
            and tile size. An GUID-based ID is automatically assigned to the
            sheet
            </summary>
            <param name="map">Map associated with the tile sheet</param>
            <param name="imageSource">Reference to an image source</param>
            <param name="sheetSize">Size of the sheet in tiles</param>
            <param name="tileSize">Size of the tiles in pixels</param>
        </member>
        <member name="M:xTile.Tiles.TileSheet.#ctor(System.String,xTile.Map,System.String,xTile.Dimensions.Size,xTile.Dimensions.Size)">
            <summary>
            Constructs a TileSheet for the given ID, map, image source, sheet
            size and tile size
            </summary>
            <param name="id">ID to assign to the tile sheet</param>
            <param name="map">Map associated with the tile sheet</param>
            <param name="imageSource">Reference to an image source</param>
            <param name="sheetSize">Size of the sheet in tiles</param>
            <param name="tileSize">Size of the tiles in pixels</param>
        </member>
        <member name="M:xTile.Tiles.TileSheet.GetTileImageBounds(System.Int32)">
            <summary>
            Computes the bounds of a tile in pixels within this TileSheet
            given the tile index
            </summary>
            <param name="tileIndex">Tile index into this TileSheet</param>
            <returns>Tile bounds in pixels within this TileSheet</returns>
        </member>
        <member name="M:xTile.Tiles.TileSheet.GetTileIndex(xTile.Dimensions.Location)">
            <summary>
            Returns the index of the tile contining the given pixel
            location within this TileSheet
            </summary>
            <param name="pixelLocation">Pixel location for which to compute tile index</param>
            <returns>Tile index computed from the given pixel location</returns>
        </member>
        <member name="P:xTile.Tiles.TileSheet.Map">
            <summary>
            Map to which this TileSheet is assigned
            </summary>
        </member>
        <member name="P:xTile.Tiles.TileSheet.ImageSource">
            <summary>
            Reference to a tile image source. May be a disk path, URL,
            content pipeline reference etc. - subject to display
            device implementation in use
            </summary>
        </member>
        <member name="P:xTile.Tiles.TileSheet.SheetSize">
            <summary>
            Width and height of the TileSheet in tiles
            </summary>
        </member>
        <member name="P:xTile.Tiles.TileSheet.SheetWidth">
            <summary>
            Width of the TileSheet in tiles
            </summary>
        </member>
        <member name="P:xTile.Tiles.TileSheet.SheetHeight">
            <summary>
            Height of the TileSheet in tiles
            </summary>
        </member>
        <member name="P:xTile.Tiles.TileSheet.TileSize">
            <summary>
            Width and height of the tiles in pixels for this TileSheet
            </summary>
        </member>
        <member name="P:xTile.Tiles.TileSheet.TileWidth">
            <summary>
            Width of the tiles in pixels for this TileSheet
            </summary>
        </member>
        <member name="P:xTile.Tiles.TileSheet.TileHeight">
            <summary>
            Height of the tiles in pixels for this TileSheet
            </summary>
        </member>
        <member name="P:xTile.Tiles.TileSheet.Margin">
            <summary>
            Left and top margin from the top-left corner of the image source
            </summary>
        </member>
        <member name="P:xTile.Tiles.TileSheet.MarginWidth">
            <summary>
            Margin from the left edge of the image source
            </summary>
        </member>
        <member name="P:xTile.Tiles.TileSheet.MarginHeight">
            <summary>
            Margin from the top edge of the image source
            </summary>
        </member>
        <member name="P:xTile.Tiles.TileSheet.Spacing">
            <summary>
            Horizontal and vertical padding in pixels between tiles in the
            image source
            </summary>
        </member>
        <member name="P:xTile.Tiles.TileSheet.SpacingWidth">
            <summary>
            Horizontal padding in pixels between tiles in the
            image source
            </summary>
        </member>
        <member name="P:xTile.Tiles.TileSheet.SpacingHeight">
            <summary>
            Vertical padding in pixels between tiles in the
            image source
            </summary>
        </member>
        <member name="P:xTile.Tiles.TileSheet.TileCount">
            <summary>
            Number of tiles within the sheet, computed from the source
            image size, margin, spacing and tile size
            </summary>
        </member>
        <member name="P:xTile.Tiles.TileSheet.TileIndexProperties">
            <summary>
            Custom properties per tile index
            </summary>
        </member>
        <member name="T:xTile.ObjectModel.PropertyValue">
            <summary>
            Represents the value of a property within a property collection
            </summary>
        </member>
        <member name="M:xTile.ObjectModel.PropertyValue.op_Implicit(System.Boolean)~xTile.ObjectModel.PropertyValue">
            <summary>
            Implicit constructor from a boolean value
            </summary>
            <param name="value">boolean value to assign</param>
            <returns>Boolean property value instance</returns>
        </member>
        <member name="M:xTile.ObjectModel.PropertyValue.op_Implicit(System.Int32)~xTile.ObjectModel.PropertyValue">
            <summary>
            Implicit constructor from an integer value
            </summary>
            <param name="value">integer value to assign</param>
            <returns>Integer property value instance</returns>
        </member>
        <member name="M:xTile.ObjectModel.PropertyValue.op_Implicit(System.Single)~xTile.ObjectModel.PropertyValue">
            <summary>
            Implicit constructor from a floating point value
            </summary>
            <param name="value">float value to assign</param>
            <returns>Float property value instance</returns>
        </member>
        <member name="M:xTile.ObjectModel.PropertyValue.op_Implicit(System.String)~xTile.ObjectModel.PropertyValue">
            <summary>
            Implicit constructor from a string value
            </summary>
            <param name="value">string value to assign</param>
            <returns>String property value instance</returns>
        </member>
        <member name="M:xTile.ObjectModel.PropertyValue.op_Implicit(xTile.ObjectModel.PropertyValue)~System.Boolean">
            <summary>
            Implicit cast operator to a boolean value
            </summary>
            <param name="propertyValue">property value to cast</param>
            <returns>Boolean value</returns>
        </member>
        <member name="M:xTile.ObjectModel.PropertyValue.op_Implicit(xTile.ObjectModel.PropertyValue)~System.Int32">
            <summary>
            Implicit cast operator to an integer value
            </summary>
            <param name="propertyValue">property value to cast</param>
            <returns>Integer value</returns>
        </member>
        <member name="M:xTile.ObjectModel.PropertyValue.op_Implicit(xTile.ObjectModel.PropertyValue)~System.Single">
            <summary>
            Implicit cast operator to a floating point value
            </summary>
            <param name="propertyValue">property value to cast</param>
            <returns>Float value</returns>
        </member>
        <member name="M:xTile.ObjectModel.PropertyValue.op_Implicit(xTile.ObjectModel.PropertyValue)~System.String">
            <summary>
            Implicit cast operator to a string value
            </summary>
            <param name="propertyValue">property value to cast</param>
            <returns>String value</returns>
        </member>
        <member name="M:xTile.ObjectModel.PropertyValue.#ctor(System.Boolean)">
            <summary>
            Constructs a property value from a boolean
            </summary>
            <param name="value">Boolean value to assign</param>
        </member>
        <member name="M:xTile.ObjectModel.PropertyValue.#ctor(System.Int32)">
            <summary>
            Constructs a property value from an integer
            </summary>
            <param name="value">Integer value to assign</param>
        </member>
        <member name="M:xTile.ObjectModel.PropertyValue.#ctor(System.Single)">
            <summary>
            Constructs a property value from a floating point value
            </summary>
            <param name="value">Float value to assign</param>
        </member>
        <member name="M:xTile.ObjectModel.PropertyValue.#ctor(System.String)">
            <summary>
            Constructs a property value from a string
            </summary>
            <param name="value">String value to assign</param>
        </member>
        <member name="M:xTile.ObjectModel.PropertyValue.#ctor(xTile.ObjectModel.PropertyValue)">
            <summary>
            Constructs a property value from another
            </summary>
            <param name="propertyValue">Property value to clone</param>
        </member>
        <member name="M:xTile.ObjectModel.PropertyValue.ToString">
            <summary>
            Returns a string representation of the property value
            </summary>
            <returns>String representation of the property value</returns>
        </member>
        <member name="P:xTile.ObjectModel.PropertyValue.Type">
            <summary>
            Property type
            </summary>
        </member>
        <member name="T:xTile.ObjectModel.PropertyCollection">
            <summary>
            General implementation of the IPropertyCollection interface
            </summary>
        </member>
        <member name="M:xTile.ObjectModel.PropertyCollection.#ctor">
            <summary>
            Constucts an empty property collection
            </summary>
        </member>
        <member name="M:xTile.ObjectModel.PropertyCollection.#ctor(xTile.ObjectModel.IPropertyCollection)">
            <summary>
            Constucts a property collection by cloning the given
            collection
            </summary>
            <param name="propertyCollection">Property collection to clone</param>
        </member>
        <member name="M:xTile.ObjectModel.PropertyCollection.CopyFrom(xTile.ObjectModel.IPropertyCollection)">
            <summary>
            Copies the given property collection into this collection
            </summary>
            <param name="propertyCollection">Property collection to copy from</param>
        </member>
        <member name="T:xTile.Map">
            <summary>
            A multi-layer tile-based map implementation. The contained Layers are
            ordered by depth
            </summary>
        </member>
        <member name="M:xTile.Map.#ctor">
            <summary>
            Constructs a map with a default "Untitled Map" ID
            </summary>
        </member>
        <member name="M:xTile.Map.#ctor(System.String)">
            <summary>
            Constructs a map with the given ID
            </summary>
            <param name="id">ID to assign to the Map</param>
        </member>
        <member name="M:xTile.Map.GetLayer(System.String)">
            <summary>
            Returns the Layer corresponding to the given layer ID or null
            if not matched
            </summary>
            <param name="layerId">ID of the Layer to retrieve</param>
            <returns>Layer corresponding to the given ID</returns>
        </member>
        <member name="M:xTile.Map.AddLayer(xTile.Layers.Layer)">
            <summary>
            Adds the given Layer to this Map
            </summary>
            <param name="layer">Layer to add</param>
        </member>
        <member name="M:xTile.Map.InsertLayer(xTile.Layers.Layer,System.Int32)">
            <summary>
            Inserts the given Layer at the given index in the
            Layer collection
            </summary>
            <param name="layer">Layer to insert</param>
            <param name="layerIndex">Insertion index into this Map's Layer collection</param>
        </member>
        <member name="M:xTile.Map.RemoveLayer(xTile.Layers.Layer)">
            <summary>
            Removes the given Layer from the Map
            </summary>
            <param name="layer">Layer to remove</param>
        </member>
        <member name="M:xTile.Map.BringLayerForward(xTile.Layers.Layer)">
            <summary>
            Moves the given Layer one index forward (higher) in this
            Map's Layer collection
            </summary>
            <param name="layer">Layer to bring forward</param>
        </member>
        <member name="M:xTile.Map.SendLayerBackward(xTile.Layers.Layer)">
            <summary>
            Moves the given Layer one index backward (lower) in this
            Map's Layer collection
            </summary>
            <param name="layer">Layer to send backward</param>
        </member>
        <member name="M:xTile.Map.DependsOnTileSheet(xTile.Tiles.TileSheet)">
            <summary>
            Tests if the given TileSheet is used by this Map by testing
            if the Layers contain and dependent tiles
            </summary>
            <param name="tileSheet">TileSheet to test</param>
            <returns>True if dependent, False otherwise</returns>
        </member>
        <member name="M:xTile.Map.GetTileSheet(System.String)">
            <summary>
            Returns the TileSheet corresponding to the given ID, or null
            if not matched
            </summary>
            <param name="tileSheetId">ID of the TileSheet to retrieve</param>
            <returns>TileSheet corresponding to the given ID, or null if unmatched</returns>
        </member>
        <member name="M:xTile.Map.AddTileSheet(xTile.Tiles.TileSheet)">
            <summary>
            Adds the given TileSheet to this Map
            </summary>
            <param name="tileSheet">TileSheet to add</param>
        </member>
        <member name="M:xTile.Map.RemoveTileSheet(xTile.Tiles.TileSheet)">
            <summary>
            Removes the given TileSheet from this Map, subject to
            dependencies
            </summary>
            <param name="tileSheet">TileSheet to remove</param>
        </member>
        <member name="M:xTile.Map.RemoveTileSheetDependencies(xTile.Tiles.TileSheet)">
            <summary>
            Removes any dependencies on the given TileSheet by clearing out
            any tiles within all Layers that depend on the TileSheet
            </summary>
            <param name="tileSheet">TileSheet for which to remove dependencies</param>
        </member>
        <member name="M:xTile.Map.Update(System.Int64)">
            <summary>
            Updates the map's animation clock with the given time interval
            </summary>
            <param name="timeInterval">Time interval in milliseconds</param>
        </member>
        <member name="M:xTile.Map.LoadTileSheets(xTile.Display.IDisplayDevice)">
            <summary>
            Loads all the TileSheets contained in this Map into the given
            display device
            </summary>
            <param name="displayDevice">Display device in which to load the TileSheets</param>
        </member>
        <member name="M:xTile.Map.DisposeTileSheets(xTile.Display.IDisplayDevice)">
            <summary>
            Frees the resources of all the TileSheets contained in this Map
            from the given display device
            </summary>
            <param name="displayDevice">Display device from which to dispose the TileSheets</param>
        </member>
        <member name="M:xTile.Map.Draw(xTile.Display.IDisplayDevice,xTile.Dimensions.Rectangle)">
            <summary>
            Visually renders this Map using the given display device and
            viewport into the map. The viewport is rendered at the display
            device's origin
            </summary>
            <param name="displayDevice">Display device on which to render the Map</param>
            <param name="mapViewport">Viewport into the Map to be rendered</param>
        </member>
        <member name="M:xTile.Map.Draw(xTile.Display.IDisplayDevice,xTile.Dimensions.Rectangle,xTile.Dimensions.Location,System.Boolean)">
            <summary>
            Visually renders this Map using the given display device and
            viewport into the map. The viewport is rendered at the given
            display offset. If wrapAround is set to True, the map wraps
            around at the edges across and / or down.
            </summary>
            <param name="displayDevice">Display device on which to render the Map</param>
            <param name="mapViewport">Viewport into the Map to be rendered</param>
            <param name="displayOffset">Pixel offset on the device where to render the map</param>
            <param name="wrapAround">Flag indicating if map wrap-around is performed</param>
        </member>
        <member name="P:xTile.Map.DisplaySize">
            <summary>
            Display size of the map in pixels. Corresponds to the size of
            the largest layer
            </summary>
        </member>
        <member name="P:xTile.Map.DisplayWidth">
            <summary>
            Display width of the map in pixels. Corresponds to the width of
            the largest layer
            </summary>
        </member>
        <member name="P:xTile.Map.DisplayHeight">
            <summary>
            Display height of the map in pixels. Corresponds to the height of
            the largest layer
            </summary>
        </member>
        <member name="P:xTile.Map.Layers">
            <summary>
            Layer collection contained in the Map
            </summary>
        </member>
        <member name="P:xTile.Map.TileSheets">
            <summary>
            TileSheet collection in the Map
            </summary>
        </member>
        <member name="P:xTile.Map.ElapsedTime">
            <summary>
            Elapsed time in milliseconds, used for tile animation
            </summary>
        </member>
        <member name="T:xTile.Pipeline.TideReader">
            <summary>
            Content reader class for tIDE map files
            </summary>
        </member>
        <member name="M:xTile.Pipeline.TideReader.Read(Microsoft.Xna.Framework.Content.ContentReader,xTile.Map)">
            <summary>
            Reads a map from the current stream
            </summary>
            <param name="contentReader">The ContentReader used to read the object</param>
            <param name="existingMap">An existing object to read into</param>
            <returns>A loaded map instance</returns>
        </member>
        <member name="T:xTile.Format.FormatManager">
            <summary>
            A singleton manager of registered file map formats. Direct access is provided
            to the default tIDE map format (.tide). Other formats are querable by extension
            </summary>
        </member>
        <member name="M:xTile.Format.FormatManager.RegisterMapFormat(xTile.Format.IMapFormat)">
            <summary>
            Registers the given map format
            </summary>
            <param name="mapFormat">Map format implementation to register</param>
        </member>
        <member name="M:xTile.Format.FormatManager.UnregisterMapFormat(xTile.Format.IMapFormat)">
            <summary>
            Unregisters the given map format
            </summary>
            <param name="mapFormat">Map format implementation to unregister</param>
        </member>
        <member name="M:xTile.Format.FormatManager.GetMapFormatByExtension(System.String)">
            <summary>
            Returns the map format implementation for the given file extension
            or Null if not matched
            </summary>
            <param name="fileExtension">File extension to query</param>
            <returns></returns>
        </member>
        <member name="M:xTile.Format.FormatManager.LoadMap(System.String)">
            <summary>
            Loads and returns a Map instance using the given file path. The map
            format is determined automatically from the file extension and the
            map is loaded using the corresponding IMapFormat implementation if
            available.
            </summary>
            <param name="filePath">Path to the map file to load</param>
            <returns>a loaded Map instance</returns>
        </member>
        <member name="P:xTile.Format.FormatManager.Instance">
            <summary>
            Reference to the singleton manager instance
            </summary>
        </member>
        <member name="P:xTile.Format.FormatManager.Item(System.String)">
            <summary>
            String-based indexer for map formap implementations
            </summary>
            <param name="mapFormatName">Format name to query</param>
            <returns></returns>
        </member>
        <member name="P:xTile.Format.FormatManager.DefaultFormat">
            <summary>
            Returns the default tIDE XML format
            </summary>
        </member>
        <member name="P:xTile.Format.FormatManager.BinaryFormat">
            <summary>
            Returns the default tIDE binary format (tBIN)
            </summary>
        </member>
        <member name="P:xTile.Format.FormatManager.MapFormats">
            <summary>
            Returns a collection of registered map formats
            </summary>
        </member>
        <member name="T:xTile.Format.CompatibilityLevel">
            <summary>
            Enumeration for the compatiblity level of a given format
            </summary>
        </member>
        <member name="F:xTile.Format.CompatibilityLevel.Full">
            <summary>
            This feature or configuration is fully supported
            </summary>
        </member>
        <member name="F:xTile.Format.CompatibilityLevel.Partial">
            <summary>
            This feature or configuration is only partially supported
            </summary>
        </member>
        <member name="F:xTile.Format.CompatibilityLevel.None">
            <summary>
            This feature or configuration is not supported at all
            </summary>
        </member>
        <member name="T:xTile.Format.CompatibilityNote">
            <summary>
            Represents the level of compatibility and associated remarks
            for a given format feature or data configuration
            </summary>
        </member>
        <member name="M:xTile.Format.CompatibilityNote.#ctor(xTile.Format.CompatibilityLevel,System.String)">
            <summary>
            Constructs a compatiblity note with the given level and
            remarks
            </summary>
            <param name="compatibilityLevel">Level of compatiblity</param>
            <param name="remarks">Any applicable remarks</param>
        </member>
        <member name="P:xTile.Format.CompatibilityNote.CompatibilityLevel">
            <summary>
            The compatbility level of this note
            </summary>
        </member>
        <member name="P:xTile.Format.CompatibilityNote.Remarks">
            <summary>
            The remarks associated with this note
            </summary>
        </member>
    </members>
</doc>
